/* Indefinite atomic reference counter
 * Example taken from Derek: http://www.mpi-sws.org/~dreyer/talks/talk-dagstuhl16.pdf
 */

shared bool free;
shared int count;

thread bool f;
thread int c;

// Assumption: clone() cannot be called when there are no references
method clone() {
  {| arc() |} < count++ >; {| arc() * arc() |}
}

// Try to prove that print() when holding a reference is always valid
// i.e. free can never be true when {| arc() |} is held
method print() {
  {| arc() |}
    <f = free>;
  {| arc() * specialViewForFree(f) |}
    // Test for disposal
    if (f == true) {
      {| error() |} ; {| error() |}
    }
  {| arc() |}
}

method drop() {
  {| arc() |}
    < c = count-- >;
  {| specialViewForC(c) |}
    if (c == 1) {
      {| noCnt() |}
        <free = (true)>;
      {| emp |}
    }
  {| emp |}
}

view error();
view iter[n] arc();
view noCnt();

// These views just add free=f and count=c to the final proof predicates
view specialViewForC(int c);
view specialViewForFree(bool f);

constraint emp -> ?;
constraint noCnt() -> ?;
constraint specialViewForC(c) -> ?;
constraint specialViewForFree(f) -> ?;

// holds less than count arc()'s
//  and if holding at least 1 then it can't have been freed
constraint iter[n] arc() -> n <= count
                            && (n > 0 => (free == false));

// goal
constraint error() -> false;
